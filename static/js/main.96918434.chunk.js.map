{"version":3,"sources":["components/card.js","components/cardarray.js","components/playerdetails.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","Playerdetails","nation","id","team","age","name","className","src","alt","Cardarray","map","eachPlayer","index","key","filename","SearchBox","SearchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchbar","target","value","state","players","this","Filteredplayers","filter","player","toLowerCase","includes","length","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96918434.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (Playerdetails) =>{\n    const {nation,id,team,age,name}=Playerdetails;\n    return(\n        <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>  \n            {/* <img src={process.env.PUBLIC_URL + `./images/${filename}`} alt={`${name}`} /> */}\n            <img src={`https://robohash.org/${id}?size=300x300`} alt={`${name}`} />\n            <div>\n                <h2>{name}</h2>\n                <p>Nation : {nation}</p>\n                <p>Age : {age}</p>\n                <p>Team : {team}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './card';\nconst Cardarray = ({Playerdetails}) => {\n    return(\n        <div>{\n                Playerdetails.map ((eachPlayer,index) =>{\n                    return (<Card \n                            key={index} \n                            id={Playerdetails[index].id} \n                            name={Playerdetails[index].name} \n                            team={Playerdetails[index].team} \n                            age={Playerdetails[index].age} \n                            nation={Playerdetails[index].nation} />\n                    );\n                })\n            }\n        </div> \n    );\n}\n\nexport default Cardarray;\n\n//it's called dumb or pure function...if the parameter or prop passed is same ...return will always be same.\n//props are the input we get..and we dont modify them\n//STATE - the description of your app.....an object the t describes the application\n//so here the sate that describes the app is Playerdetails and whatever is searched the the searchbox\n//state is able to change\n//so props are simply things that come out of state\n//the parent says the child what the state is...and the child recieves it as rops","\nexport const Playerdetails = [\n    {\n        id : 1,\n        name : 'Cristiano Ronaldo',\n        team : 'Juventus',\n        age : '35',\n        nation : 'Portugal',\n        filename : 'ronaldo.jpg'\n    },\n\n    {\n        id : 2,\n        name : 'Lionel Messi',\n        team : 'Barcelona',\n        age : '32',\n        nation : 'Argentina',\n        filename : 'ronaldo.jpg'\n\n    },\n\n    {\n        id : 3,\n        name : 'Sadio Mane',\n        team : 'Liverpool',\n        age : '27',\n        nation : 'Senegal',\n        filename : 'ronaldo.jpg'\n\n    },\n\n    {\n        id : 4,\n        name : 'Neymar Jr.',\n        team : 'PSG',\n        age : '27',\n        nation : 'Brazil',\n        filename : 'ronaldo.jpg'\n\n\n    },\n\n    {\n        id : 5,\n        name : 'Kylian Mbappe',\n        team : 'PSG',\n        age : '21',\n        nation : 'France',\n        filename : 'ronaldo.jpg'\n\n\n    },\n\n    {\n        id : 6,\n        name : 'Mohamed Salah',\n          team : 'Liverpool',\n        age : '27',\n        nation : 'Egypt',\n        filename : 'ronaldo.jpg'\n\n\n    },\n    {\n        id : 7,\n        name : 'Sergio Aguero',\n        team : 'Manchester City',\n        age : '31',\n        nation : 'Argentina',\n        filename : 'ronaldo.jpg'\n\n\n    },\n    {\n        id : 8,\n        name : 'Karim Benzema',\n        team : 'Real Madrid',\n        age : '32',\n        nation : 'France',\n        filename : 'ronaldo.jpg'\n\n\n    },\n    {\n        id : 9,\n        name : 'Philippe Coutinho',\n        team : 'Bayern Munich',\n        age : '27',\n        nation : 'Brazil',\n        filename : 'ronaldo.jpg'\n\n\n    },\n    {\n        id : 10,\n        name : 'Eden Hazard',\n        team : 'Real Madrid',\n        age : '28',\n        nation : 'Belgium',\n        filename : 'ronaldo.jpg'\n\n\n    },\n\n]","import React from 'react';\n\nconst SearchBox = ({SearchChange}) =>{\n    return(\n        <div className = 'pa2'>\n            <input type='search' placeholder ='Search Players' className ='pa3 ba b--green bg-lightest-blue'    onChange = {SearchChange}  />   \n            {/* SearchChange ta ekta function but () dile problem hochhe */}\n            {/* we're saying everytime the onchangr(html property) is triggred call SearchChange */}\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{ \n    \n    return(             //we can just create a scroll.css and do style but here is the second option with {{}} we'll return an object\n        <div style = {{ overflowY : 'scroll' , border : '2px solid black', height : '800px'}}>\n            {props.children}\n        </div>\n    );\n    \n}\n\nexport default Scroll;","import React, { Component } from 'react';\nimport Cardarray from '../components/cardarray';\nimport {Playerdetails} from '../components/playerdetails.js';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n//as state is just an object\n// const state = {                                                                              this code will be inside the constructor\n//     players : Playerdetails,\n//     searchbar : '',\n// }\n\nclass App extends Component {\n\n    constructor(){\n        \n        super();\n\n        this.state = {                                         //state usually livs in the parent component so that it can be passed on\n            players : [],\n            searchbar : '',                                    //to uodate this state - this.setState();\n        }\n    }\n    \n    //may be arrow function work kore na class e tai normal funtion likhbo\n    onSearchChange = (event) => {                                                //    onSearchChange(event) chilo age but event ta searchbox er event chilo\n        this.setState({searchbar: event.target.value});     //searchbar update hochhe\n      \n\n    }\n\n    componentDidMount(){\n        this.setState({players : Playerdetails});\n    }\n\n\n    render(){\n\n        const Filteredplayers = this.state.players.filter((player) => {          //filtering this will return an array\n            return player.name.toLowerCase().includes(this.state.searchbar.toLowerCase())\n        })\n        \n        if (this.state.players.length === 0){\n            return <h1>LOADING</h1>\n        }\n\n        return(\n            <div className = 'tc'>\n                \n                <link href=\"https://fonts.googleapis.com/css?family=Courier+Prime&display=swap\" rel=\"stylesheet\"/>\n\n                <h1>SoccerStar</h1>\n                <SearchBox SearchChange={this.onSearchChange} />\n                {/* <Cardarray Playerdetails={Playerdetails}/>  before class */}\n                <Scroll>\n                    <Cardarray Playerdetails = {Filteredplayers} />\n                </Scroll>   \n                {/* <Cardarray Playerdetails = {this.state.players} /> */}\n\n            </div>\n        );\n    }\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'tachyons';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n                <App />,\n                document.getElementById('root')\n                );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister(); //needed to build progressive webapps\n"],"sourceRoot":""}